/* soapHuahsinServiceBindingPortProxy.cpp
   Generated by gSOAP 2.8.68 for hello.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapHuahsinServiceBindingPortProxy.h"

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	HuahsinServiceBindingPortProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy(const HuahsinServiceBindingPortProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	HuahsinServiceBindingPortProxy_init(_soap->imode, _soap->omode);
}

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	HuahsinServiceBindingPortProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	HuahsinServiceBindingPortProxy_init(iomode, iomode);
}

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	HuahsinServiceBindingPortProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	HuahsinServiceBindingPortProxy_init(imode, omode);
}

HuahsinServiceBindingPortProxy::~HuahsinServiceBindingPortProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void HuahsinServiceBindingPortProxy::HuahsinServiceBindingPortProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://huahsin68.org/helloService", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

HuahsinServiceBindingPortProxy *HuahsinServiceBindingPortProxy::copy()
{	HuahsinServiceBindingPortProxy *dup = SOAP_NEW_UNMANAGED(HuahsinServiceBindingPortProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

HuahsinServiceBindingPortProxy& HuahsinServiceBindingPortProxy::operator=(const HuahsinServiceBindingPortProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void HuahsinServiceBindingPortProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void HuahsinServiceBindingPortProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	HuahsinServiceBindingPortProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void HuahsinServiceBindingPortProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *HuahsinServiceBindingPortProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *HuahsinServiceBindingPortProxy::soap_fault()
{	return this->soap->fault;
}

const char *HuahsinServiceBindingPortProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *HuahsinServiceBindingPortProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int HuahsinServiceBindingPortProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int HuahsinServiceBindingPortProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void HuahsinServiceBindingPortProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void HuahsinServiceBindingPortProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *HuahsinServiceBindingPortProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int HuahsinServiceBindingPortProxy::helloworld(const char *endpoint, const char *soap_action, ns1__RequestType *ns1__Request, ns1__ResponseType &ns1__Response)
{
	struct __ns1__helloworld soap_tmp___ns1__helloworld;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/services/hello";
	if (soap_action == NULL)
		soap_action = "http://huahsin68.org/helloworld";
	soap_tmp___ns1__helloworld.ns1__Request = ns1__Request;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__helloworld(soap, &soap_tmp___ns1__helloworld);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__helloworld(soap, &soap_tmp___ns1__helloworld, "-ns1:helloworld", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__helloworld(soap, &soap_tmp___ns1__helloworld, "-ns1:helloworld", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__ResponseType*>(&ns1__Response)) // NULL ref?
		return soap_closesock(soap);
	ns1__Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Response.soap_get(soap, "ns1:Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
